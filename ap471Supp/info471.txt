











                                    Acromag, Inc.
                                  30765 S.Wixom Road
                 
                              Wixom, Michigan 48393-7037

                                Phone: (248)295-0310
                                 FAX: (248)624-9234

                                Linux Software Library
                         Information File for the AP471 Board
                                        V1.0
                                      12/01/15




               The  information  in this manual is subject to  change
               without notice.   Acromag,  Inc.  makes no warranty of
               any kind with regard to this material and accompanying
               software,  including, but not limited to , the implied
               warranties  of  merchantability  and  fitness  for   a
               particular   purpose.    Acromag,   Inc.   assumes  no
               responsibility for any errors that may appear in  this
               manual and accompanying software.

               See GPL.txt and LGPL.txt.
































       1.  Overview

	This  "information"  file  contains a description of  the library
 	programs used for the following model of Acromag Industrial  I/O
	Board:

	AP471 Digital I/O Board


	2. Introduction

	The software  for  the AP471 board  is  implemented  as a library
	of "C" functions.     This  will  make  it  possible  to  utilize
	the  board by simply  linking  the user's  code with the provided
	library   and   making   function   calls   for   each  "command"
	to be accomplished.    Most of the function  calls  will  require
	a  few  parameters  or  the  address  of  a  parameter  block  to
	be  passed.   The  parameters will  include  the  board  address,
	configuration  information,  data storage addresses,  and  status
	information. These functions accomplish the following tasks:

	     - Configuration
	     - Read Status
	     - Read Input
	     - Write Output
	     - Interrupts


	Also  included  is  a demonstration program which shows  how  the
	library routines are used.  It is also a helpful program  to  use
	when first installing the board, checking  it  out, and  learning
	how it works.


	3. List of Files

	The library  software  for  each  Acromag  I/O  board  is  in	a
	correspondingly named  subdirectory  on the  supplied media.  The
	files  which  make  up  the  library  for  the  AP471  board  are
	stored in  the  subdirectory  named "AP471".
	There  are two types of program files provided.   Library program
	files are the files which make up the "library".  Support program
	files contain example programs which show how to use the library.















				   1






	3.1 Library Program Files

	The following files are included on the supplied media and make
        up the actual "library" software.

	     AP471.h   - include file.
	     cnfg471.c - configure.
	     rsts471.c - read status.
	     rpnt471.c - read an input point.
	     rprt471.c - read an input port.
	     wpnt471.c - write an output point.
	     wprt471.c - write an output port.


	3.2 Support Program Files

	The  following files are included on the supplied media.   The
	test program demonstrates how  the library  programs may be used.

	     drvr471.c - test program to  demonstrate  library  programs.
             apcommon.h - generic include file for support.
             apcommon.c - generic source file for support.


	4. Software Installation

	It  is strongly advised that the user make a backup copy  of  the
	distribution media and that the original  distribution  media  be
	stored in a safe place.

	The  software is installed by simply copying the library files to
	the  user's  work directory and compiling and  linking  with  the
	user's application program.


	5. Hardware Installation

	For proper installation of each Acromag I/O board the user should
	refer  to  the appropriate user's manual.


	6. Usage of the Library and Support Programs

	The  software is installed  by copying the supplied files to your
	work  directory and compiling  and linking  with your application
	program.

	It  is recommended that the user read the  User's Manual for  the
	board  and  thoroughly  familiarize themselves with the hardware.

	For a new user to become familiar with the Acromag Library it may
	be  most  "straight forward"  to proceed in the following manner:
                                 






				      -2-





















               (a) Build and load the Acromag device driver module.

                 i)   See  the   information  file  in  the device driver
                 directory   "/home/AP/AP471/dev471/info.txt"   for
                 information about building and loading the device driver
                 module.

               (b) Build and execute the Acromag Library Demonstration.


                  i)  Copy the Acromag Library routines from the "AP471"
                  directory of the source media to a new directory  under
                  /home/AP/AP471.


                  ii)  Copy   the  AP common  support routines  from the
                  "apcommon" directory of the  source  media  to  a  new
                  directory  under   /home/AP/apcommon. 


                  iii) From  a  tty  shell,   make  /home/AP/AP471  the
                  current directory then use the  makefile  to  build the
                  project.

                  iv)  Launch  the  debugger,  "gdb a.out"  use the 'run' 
                  and then 'continue' commands to start the program. 


                  v)   The  Acromag  Demonstration  program  menu  should
                  appear  on  the  target processor's  console  terminal.




  









				      -3-





	The following menu is displayed:

	     AP471 Library Demonstration Version A

	     1. Exit this Program
	     2. Set Up Configuration Parameters
	     3. Configure Board Command
	     4. Read Status Command
	     5. Attach Interrupt Handler
	     6. Detach Interrupt Handler
	     7. Read Input Point
	     8. Read Input Port
	     9. Write Output Point
	    10. Write Output Port

	    Select:

	To perform digital I/O, follow this sequence of menu selections:

	     Select 4: To read the board's status.
	     Select 7 or 8: To read input.
	     Select 9 or 10: To write output

	To use  the example  interrupt  routines  provided,  follow  this
	sequence of main menu selections:

	     Select 5: To attach the interrupt handler.
	     Select 2: To set up Configuration through the  Configuration
		       Parameter  Menu.   This  Menu  will allow the user
		       to set the board up for interrupts.
		       Following are typical values for the Configuration
		       parameters when using the example routines:

        Configuration Parameters

        Return to Previous Menu
        Parameter Mask:    0xFF
        Debounce Clock:    0x00
        Debounce Duration: R0 = 0x00000000 R1 = 0x00000000 R2 = 0x00000000
        Debounce Control:  R0 =     0x0000 R1 =     0x0000 R2 =     0x0000
        Write Mask:        R0 =     0x0000 R1 =     0x0000 R2 =     0x0000
        Event Type:        R0 =     0xFFFF R1 =     0xFFFF R2 =     0xFFFF
        Event Polarity:    R0 =     0x0000 R1 =     0x0000 R2 =     0x0000
        Event Enable:      R0 =     0xFFFF R1 =     0xFFFF R2 =     0xFFFF


	     Select 3: To  configure  the board using the information  in
		       the Configuration Block.
	     Select 4: To read the board's status information.
	     Select 7, or 8: To read port data.
	     Select 9, or 10: To write port data.









				      -4-







	6.1 Explanation of Main Demonstration Menu

	Following is an explanation of each menu selection:

	     1. Exit this Program

	     This selection causes execution to be returned to the shell.

	     2. Set Up Configuration Parameters

	     This  selection will cause the Configuration Parameter  Menu
	     to be displayed.	Through  that menu it will be possible to
	     enter  values  into the  various  structure members  of  the
	     Configuration structure.  See section 6.2 for details on the
	     Configuration Parameter Menu which follows.

	     3. Configure Board Command

	     This  menu selection will call the  cnfg471()  function  and
	     pass a pointer which points to the Configuration  structure.
	     Information in the Configuration  is  written  to the board.

	     4. Read Status

	     This  menu  selection will call the rsts471()  function  and
	     pass a pointer which points to the Configuration  structure.
	     The  current status information is read from the  board  and
	     written into this structure by the rsts471()  function.  The
	     status information is then displayed by the example program.

	     5. Attach Interrupt Handler

	     This  menu   selection  allows  the  user  to  attach   the 
	     interrupt  handler for  use  with the demonstration program.
	     Please  see  the  descriptions  in  this   document  of  the
	     interrupt handler routines and the extensive comments in the
	     source code of the routines.

	     6. Detach Interrupt Handler

	     This menu selection allows the user to disable interrupts for
	     the board.

	     7. Read Input Point

	     This  command  is used to read a  single  input  point.  The
	     user enters the  port  number  (0 thru 2)  and  point number
	     (15 to 0).	  The  rpnt471()  function  is  called, then  the
	     result is displayed.









				      -5-






	     8. Read Input Port

	     This  command is used to read a port.   The user  enters the
	     port number (0 thru 2).   The  rprt471() function is called,
	     then the result is displayed.

	     9. Write Output Point

	     This  command is  used  to  write  a  single  output  point.
	     The user enters the port number (0 thru 2), the point number
	     (15 to 0),  and  the  value  to  write  (0 or 1),  then  the
	     wpnt471() function is called.

	     10. Write Output Port

	     This command is used to write a port of 16 points.  The user
	     enters the port number (0 thru 2).   The user is prompted to
	     enter  the  value  to  write ( 0000 to FFFF hex),  then  the
	     wprt471() function is called.



	6.2  Explanation of the Configuration Menu

	This  menu  is  displayed  when  the  user  selects  the  "Set Up
	Configuration"  menu  item  from  the  Main  Demonstration  Menu.
	Through the Configuration Parameter Menu it will be possible  for
	the  user to  enter  values  into  the  Configuration  structure.
	The Configuration structure is used  by  the  cnfg471() function.
	Following  is  the   "Set  Up  Configuration  Parameters"   menu.
	All numbers are displayed and entered in hexadecimal.




























				      -6-








	   Configuration Parameters

           1. Return to Previous Menu
           2. Parameter Mask:    0xFF
           3. Debounce Clock:    0x00
           4. Debounce Duration: R0 = 0x00000000 R1 = 0x00000000 R2 = 0x00000000
           5. Debounce Control:  R0 =     0x0000 R1 =     0x0000 R2 =     0x0000
           6. Write Mask:        R0 =     0x0000 R1 =     0x0000 R2 =     0x0000
           7. Event Type:        R0 =     0xFFFF R1 =     0xFFFF R2 =     0xFFFF
           8. Event Polarity:    R0 =     0x0000 R1 =     0x0000 R2 =     0x0000
           9. Event Enable:      R0 =     0xFFFF R1 =     0xFFFF R2 =     0x0000


	  Select:


	     Following is an explanation of each menu selection:

	     1. Return to Previous Menu

	     This selection returns  the user  to the Main  Demonstration
	     Menu.

	     2. Parameter Mask

	     This  selection  allows the user to enter a  value  for  the
	     Parameter Mask.  The Parameter Mask is used by the cnfg471()
	     function to  determine which parameters to update in various
	     registers of the board.	The individual bits correspond to
	     various parameters in the Configuration structure.    A  "1"
	     in the bit position means to use  the  respective  parameter
	     field to update a register on the board.	  A "0" means not
	     to use the parameter field.

		  bit 0  - Write Mask Register Parameter.
		  bit 1  - Event Enable Register Parameter.
		  bit 2  - Event Type Register Parameter.
		  bit 3  - Event Polarity Register Parameter.
		  bit 4  - Debounce Clock Register Parameter.
		  bit 5  - Debounce Control Register Parameter.
		  bit 6  - Debounce Duration Register Parameter.
		  bit 7  - Not Used.


	     3. Debounce Clock

	     This  selection  allows  the user to enter a value  for  the
	     Debounce Clock Register.     If bit 1 of this register is 1,
	     then the debounce clock is taken from I/O47  (pin 41 of P2).
	     If bit 0 of this register is 0,  then  the  internal  system
	     clock is used (recommended).






				      -7-







	     4. Debounce Duration

	     This  selection  allows  the user to enter  values  for  the
	     Debounce Duration Registers.    Two  bits are used to select
	     one of four debounce values for each channel.     A debounce
	     value  of  00  selects 3-4uS, 01 selects 48-64uS, 10 selects
	     0.75-1mS, and 11 selects 6-8mS.

	     5. Debounce Control

	     This  selection  allows  the user to enter a value  for  the
	     Debounce Control Register.  A value of "1" in a bit position
	     enables  debounce  operation  for  the corresponding channel
	     in a port.     A value of "0" in a bit position disables the
	     debounce logic for for  the corresponding channel of a port.

	     6. Write Mask

	     This  selection  allows the user to enter a  value  for  the
	     Write Mask Register.    This  register  is used  to mask the
	     ability  to  write  data to the output ports.   A "1" in any
	     bit position  will  mask  writes to the output port.  A  "0"
	     in  any bit position will unmask (allow) writes to the port.

	     7. Event Type

	     This  selection  allows  the user to enter a value  for  the
	     Event Type Register.      A "0" in a bit position  means  an
	     interrupt  will be  generated when  the corresponding  input
	     channel level  specified  by  the  Event  Polarity  Register
	     occurs.   A "1" in a bit position means an interrupt will be
	     generated when the corresponding input channel changes state.

	     8. Event Polarity

	     This selection allows the user to enter values for the Event
	     Polarity Registers.    Event  Polarity  Registers select the
	     polarity  of the input that will be sensed for each channel.
	     A value  of "0" in a  bit position selects events on the low
             edge.   A value of "1" in  a bit position selects  events on
             the high edge.

	     9. Event Enable

	     This selection allows the user to enter a value for the Event
	     Enable  Register.    Each bit corresponds to an input channel
             in the Event Enable Registers.   A "1" in a bit position will
             allow interrupts to be generated by the  corresponding  input
             channel.      A "0" disables interrupts for the corresponding
             input channel.








				      -8-







	     10. Board Interrupt Enable

	     This  selection  allows the user to enter a  value  for  the
	     Board Interrupt  Enable  Register.    Writing a  "1" to  bit
             position  0  will  allow  interrupts  to be generated by the
             AP471 board.     A "0" in bit position 0 disables interrupts
             for the entire AP471 board.




	7. Description of Library Programs.

	Following  are descriptions of the programs and files which  make
	up the library.

	AP471.h - This module contains the  definitions  and  structures
	used by the library.

	cnfg471.c - This module  is used to perform the "Configure Board"
	function  for the AP471 board.   A  pointer to the Configuration
	Block is passed to this routine.  The routine  will use a pointer
	within the Configuration Block to  reference the registers on the
	board.  Based on flag bits in the  Parameter  Mask  word  in  the
	Configuration Block, the board  will be  configured  and  various
	registers will be  updated  with  new information which  will  be
	transferred from the Configuration Block structure.

	  calling sequence:

	     cnfg471(ptr);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.


	rsts471.c  - This  module  is used to  perform  the "Read Status"
	function  for  the  AP471  board.	A pointer  to  the Status
	Block  is  passed to this routine.  The routine  uses  a  pointer
	within  the Status Block to reference registers on the board  and
	transfers   information  from  the  board to  the  Status  Block.

	  calling sequence:

	     rsts471(ptr);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Status Block structure.








				      -9-







	rpnt471.c  -  This module  is used to  perform  the  "Read  Input
	Point" function for the AP471 board.   A  pointer to  the  board
	configuration structure, the port number and the point number are
	passed to this  routine.  This information is  used  to  read the
	point value from the board.

	  calling sequence:

	     status = rpnt471(c_blk,port,point);

	     where:
		  status   - (uint16_t) Returned value of the input point.
		  c_blk    - (structure  pointer) Pointer to the board
			      configuration structure.
		  port     - (uint16_t) Target input port number.
		  point    - (uint16_t) Target input point number.


	rprt471.c  -  This  module  is used to perform  the  "Read  Input
	Port" function for the AP471 board.     A  pointer  to the  board
	configuration structure  and  port number (0, 1, 2) are passed to
	this routine.     This information is used to read the input port
	data value from the board.

	  calling sequence:

	     status = rprt471(c_blk,port);

	     where:
		  status   - (uint16_t) Returned value of the input port.
		  c_blk    - (structure  pointer) Pointer to the board
			     configuration structure.
		  port	   - (uint16_t) Target input port number.


	wpnt471.c  -  This module is used to perform  the  "Write Output
	Point" function for the AP471 board.    A pointer to  the  board
	configuration structure,  the port number,  the point number and
	point  value  to  write  are  passed  to  this  routine.


	  calling sequence:

	     status = wpnt471(c_blk,port,point,value);

	     where:
		  status   - (uint16_t) Returned error status of the function.
		  c_blk    - (structure  pointer) Pointer to the board
			      configuration structure.
		  port     - (uint16_t) Target input port number.
		  point    - (uint16_t) Target input point number.
		  value    - (uint16_t) Value to write to output point.






				     -10-







	wprt471.c  -  This  module is used to perform  the  "Write Output
	Port" function for the AP471 board.    A  pointer  to  the  board
	configuration structure, the port number and port  value to write
	are passed to this routine.


	  calling sequence:

	     status = wprt471(c_blk,port,value);

	     where:
		  status   - (uint16_t) Returned error status of the function.
		  c_blk    - (structure  pointer) Pointer to the board
			      configuration structure.
		  port     - (uint16_t) Target input port number.
		  value    - (uint16_t) Value to write to output port.



	8. Description of Support Programs

	Following  is  a  description of the support  files  and  program
	modules  which  provide  examples  for  the  use  of  the library
	programs.

	apcommon.c - This file provides common support routines.

	drvr471.c  - This  is a program which demonstrates the  usage  of
	the library modules.   This program is menu driven and allows the
	user to become familiar with  the AP471  board  and  the  library
	software.   The user may,  through menu  selections,   configure,
	read from and write to the board.




	





















				     -11-



